{"version":3,"sources":["shared/serverUrl.js","redux/actionCreators.js","redux/actionTypes.js","components/HeaderComponent.js","components/FooterComponent.js","components/LoadingComponent.js","components/HomeComponent.js","components/MenuComponent.js","components/ContactComponent.js","components/AboutComponent.js","components/DishDetailComponent.js","components/MainComponent.js","redux/dishInfoReducer.js","redux/commentInfoReducer.js","redux/promoInfoReducer.js","redux/leaderInfoReducer.js","redux/forms.js","redux/configureStore.js","App.js","serviceWorker.js","index.js"],"names":["serverUrl","serverSuccess","response","ok","error","Error","status","statusText","serverFail","message","commentPosting","type","commentPostFailed","errorMessage","payload","addComment","comment","postComment","dishId","rating","author","dispatch","newComment","id","undefined","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","json","catch","dishListLoading","dishListFailed","addDishList","dishList","fetchDishList","commentListLoading","commentListFailed","addCommentList","commentList","fetchCommentList","promoListLoading","promoListFailed","addPromoList","promoList","fetchPromoList","leaderListLoading","leaderListFailed","addLeaderList","leaderList","fetchLeaderList","feedbackPostSuccess","feedbackPostAttempt","feedbackPostFailed","postFeedback","formValues","newFeedback","firstname","lastname","telnum","email","agree","contactType","alert","Header","props","state","isNavOpen","isModalOpen","handleLogin","bind","this","setState","event","toggleModal","username","value","password","remember","checked","preventDefault","Fragment","dark","expand","className","onClick","toggleNav","href","src","height","width","alt","isOpen","navbar","to","outline","toggle","onSubmit","htmlFor","name","innerRef","input","check","Component","Footer","Loading","RenderCard","item","isLoading","in","transformProps","exitTransform","image","designation","description","Home","dishInfo","promoInfo","leaderInfo","featuredDish","filter","dish","featured","featuredPromo","promo","featuredLeader","leader","Menu","selectedDishId","menu","map","index","active","required","val","length","maxLength","len","minLength","isNumber","isNaN","Number","emailRegex","validEmail","test","ContactComponent","handleSubmit","values","resetFeedbackForm","role","model","md","text","placeholder","validators","show","messages","size","offset","checkbox","select","textarea","rows","RenderLeader","leaderItems","key","tag","left","middle","object","heading","list","About","title","requiredSelect","CommentForm","RenderDish","RenderCommentList","dishCommentList","commentItems","dateOptions","weekday","year","month","day","x","d","toLocaleDateString","DishDetail","isValidComment","form","valid","onUpdate","handleUpdate","disabled","MainComponent","location","classNames","timeout","path","component","console","log","exact","match","menuDishId","parseInt","params","selectedDishList","selectedDish","selectedDishCommentList","commentInfo","withRouter","connect","actions","reset","initialState","DishInfoReducer","action","Object","assign","isPosting","CommentInfoReducer","newState","push","errorComment","PromoInfoReducer","LeaderInfoReducer","InitialFeedbackForm","middlewareEnhancers","applyMiddleware","thunk","logger","allEnhancers","composeWithDevTools","actionCreators","trace","traceLimit","composedEnhancers","store","createStore","combineReducers","createForms","feedback","getState","App","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab4d2976.chunk.js","sourcesContent":["// path to server\r\nexport const serverUrl = 'http://localhost:3001/';\r\n\r\n\r\n","import * as ActionTypes from './actionTypes';\r\n\r\n// server url\r\nimport { serverUrl } from '../shared/serverUrl';\r\n\r\n//\r\n// server response is ok\r\n//\r\nconst serverSuccess = (response) => {\r\n\r\n    if (response.ok) {\r\n        return response;\r\n    // else the response is a server processing error\r\n    } else {\r\n        // generate a new error object\r\n        let error = new Error('Server Error:' + response.status + \":\" + response.statusText);\r\n        error.response = response;\r\n        throw error;\r\n    }\r\n\r\n}\r\n\r\n//\r\n// server does not respond, error occured, promise failed\r\n//\r\nconst serverFail = (error) => {\r\n\r\n    // prepend more info to the error message\r\n    error.message = \"Server Error: Unable to contact the server. \" + error.message;\r\n\r\n    throw error;\r\n    \r\n}\r\n\r\n\r\n//\r\n// comment actions\r\n//\r\n\r\n// load action\r\nexport const commentPosting = () => ({\r\n    type: ActionTypes.COMMENT_POSTING\r\n});\r\n\r\n// failed action\r\nexport const commentPostFailed = (errorMessage) => ({\r\n    type: ActionTypes.COMMENT_POST_FAILED,\r\n    payload: errorMessage\r\n});\r\n\r\n//\r\n// add comment action\r\n//\r\nexport const addComment = (comment) => ({\r\n    type: ActionTypes.ADD_COMMENT,\r\n    payload: comment\r\n    \r\n});\r\n\r\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\r\n\r\n    // dispatch dishlist loading\r\n    dispatch(commentPosting());\r\n    \r\n    const newComment = {\r\n        id: undefined, // the new unique id # will be set by the server during post command\r\n        dishId: dishId, \r\n        rating: rating, \r\n        comment: comment,\r\n        author: author,\r\n        date: new Date().toISOString()\r\n    }\r\n\r\n\r\n    // post comment to server\r\n    return fetch(serverUrl + 'comments', \r\n        {\r\n            method: 'POST',\r\n            body: JSON.stringify(newComment),\r\n            headers: { 'Content-Type': 'application/json' },\r\n            credentials: 'same-origin'\r\n        })\r\n\r\n        // server gives a response as a promise\r\n        .then(serverSuccess, serverFail)\r\n\r\n        // convert response to json\r\n        .then(response => response.json())\r\n\r\n        // take json and dispatch a add dish action\r\n        .then(response => dispatch(addComment(response)))\r\n\r\n        // catch any of the thrown errors\r\n        .catch(error => dispatch(commentPostFailed(error.message)));\r\n\r\n};\r\n\r\n//\r\n// dishList actions\r\n//\r\n\r\n// load action\r\nexport const dishListLoading = () => ({\r\n    type: ActionTypes.DISHLIST_LOADING\r\n});\r\n\r\n// failed action\r\nexport const dishListFailed = (errorMessage) => ({\r\n    type: ActionTypes.DISHLIST_FAILED,\r\n    payload: errorMessage\r\n});\r\n\r\n// add action\r\nexport const addDishList = (dishList) => ({\r\n    type: ActionTypes.SET_DISHLIST,\r\n    payload: dishList\r\n});\r\n\r\n// thunk function for fetching dishes\r\nexport const fetchDishList = () => (dispatch) => {\r\n\r\n    // dispatch dishlist loading\r\n    dispatch(dishListLoading());\r\n\r\n    // from server\r\n    return fetch(serverUrl + 'dishes')\r\n\r\n        // server gives a response as a promise\r\n        .then(serverSuccess, serverFail)\r\n\r\n        // convert response to json\r\n        .then(response => response.json())\r\n\r\n        // take json and dispatch a add dish action\r\n        .then(dishList => dispatch(addDishList(dishList)))\r\n\r\n        // catch any of the thrown errors\r\n        .catch(error => dispatch(dishListFailed(error.message)));\r\n\r\n};\r\n\r\n//\r\n// commentList actions\r\n//\r\n\r\n// load action\r\nexport const commentListLoading = () => ({\r\n    type: ActionTypes.COMMENTLIST_LOADING\r\n});\r\n\r\n\r\n// failed action\r\nexport const commentListFailed = (errorMessage) => ({\r\n    type: ActionTypes.COMMENTLIST_FAILED,\r\n    payload: errorMessage\r\n});\r\n\r\n// add action\r\nexport const addCommentList = (commentList) => ({\r\n    type: ActionTypes.SET_COMMENTLIST,\r\n    payload: commentList\r\n});\r\n\r\n// thunk function for fetching commentes\r\nexport const fetchCommentList = () => (dispatch) => {\r\n\r\n    // dispatch commentlist loading\r\n    dispatch(commentListLoading());\r\n\r\n    // from server\r\n    return fetch(serverUrl + 'comments')\r\n\r\n        // server gives a response as a promise\r\n        .then(serverSuccess, serverFail)\r\n\r\n        // convert response to json\r\n        .then(response => response.json())\r\n        // take json and dispatch a add comment action\r\n        .then(commentList => dispatch(addCommentList(commentList)))\r\n\r\n        // catch any of the thrown errors\r\n        .catch(error => dispatch(commentListFailed(error.message)));\r\n\r\n};\r\n\r\n//\r\n// promoList actions\r\n//\r\n\r\n// load action\r\nexport const promoListLoading = () => ({\r\n    type: ActionTypes.PROMOLIST_LOADING\r\n});\r\n\r\n\r\n// failed action\r\nexport const promoListFailed = (errorMessage) => ({\r\n    type: ActionTypes.PROMOLIST_FAILED,\r\n    payload: errorMessage\r\n});\r\n\r\n// add action\r\nexport const addPromoList = (promoList) => ({\r\n    type: ActionTypes.SET_PROMOLIST,\r\n    payload: promoList\r\n});\r\n\r\n// thunk function for fetching promoes\r\nexport const fetchPromoList = () => (dispatch) => {\r\n\r\n    // dispatch promolist loading\r\n    dispatch(promoListLoading());\r\n\r\n    // from server\r\n    return fetch(serverUrl + 'promotions')\r\n\r\n        // server gives a response as a promise\r\n        .then(serverSuccess, serverFail)\r\n\r\n        // convert response to json\r\n        .then(response => response.json())\r\n\r\n        // take json and dispatch a add promo action\r\n        .then(promoList => dispatch(addPromoList(promoList)))\r\n\r\n        // catch any of the thrown errors\r\n        .catch(error => dispatch(promoListFailed(error.message)));\r\n\r\n};\r\n\r\n\r\n//\r\n// leaderList actions\r\n//\r\n\r\n// load action\r\nexport const leaderListLoading = () => ({\r\n    type: ActionTypes.LEADERLIST_LOADING\r\n});\r\n\r\n\r\n// failed action\r\nexport const leaderListFailed = (errorMessage) => ({\r\n    type: ActionTypes.LEADERLIST_FAILED,\r\n    payload: errorMessage\r\n});\r\n\r\n// add action\r\nexport const addLeaderList = (leaderList) => ({\r\n    type: ActionTypes.SET_LEADERLIST,\r\n    payload: leaderList\r\n});\r\n\r\n// thunk function for fetching leaderes\r\nexport const fetchLeaderList = () => (dispatch) => {\r\n\r\n    // dispatch leaderlist loading\r\n    dispatch(leaderListLoading(true));\r\n\r\n    // from server\r\n    return fetch(serverUrl + 'leaders')\r\n\r\n        // server gives a response as a promise\r\n        .then(serverSuccess, serverFail)\r\n\r\n        // convert response to json\r\n        .then(response => response.json())\r\n\r\n        // take json and dispatch a add leader action\r\n        .then(leaderList => dispatch(addLeaderList(leaderList)))\r\n\r\n        // catch any of the thrown errors\r\n        .catch(error => dispatch(leaderListFailed(error.message)));\r\n\r\n};\r\n\r\n//\r\n// feedback actiosn to send feedback to the server\r\n//\r\n\r\n// load action\r\nexport const feedbackPostSuccess = (response) => ({\r\n    type: ActionTypes.FEEDBACK_POST_SUCCESS,\r\n    payload: response\r\n});\r\n\r\n\r\n// load action\r\nexport const feedbackPostAttempt = () => ({\r\n    type: ActionTypes.FEEDBACK_POST_ATTEMPT\r\n});\r\n\r\n// failed action\r\nexport const feedbackPostFailed = (errorMessage) => ({\r\n    type: ActionTypes.FEEDBACK_POST_FAILED,\r\n    payload: errorMessage\r\n});\r\n\r\n\r\nexport const postFeedback = (formValues) => (dispatch) => {\r\n\r\n    // dispatch dishlist loading\r\n    dispatch(feedbackPostAttempt());\r\n    \r\n    const newFeedback = {\r\n        id: undefined, // the new unique id # will be set by the server during post command\r\n        firstname: formValues.firstname,\r\n        lastname: formValues.lastname,\r\n        telnum: formValues.telnum,\r\n        email: formValues.email,\r\n        agree: formValues.agree,\r\n        contactType: formValues.contactType,\r\n        message: formValues.message,\r\n        date: new Date().toISOString()\r\n    }\r\n\r\n\r\n    // post feedback to server\r\n    return fetch(serverUrl + 'feedback', \r\n        {\r\n            method: 'POST',\r\n            body: JSON.stringify(newFeedback),\r\n            headers: { 'Content-Type': 'application/json' },\r\n            credentials: 'same-origin'\r\n        })\r\n\r\n        // server gives a response as a promise\r\n        .then(serverSuccess, serverFail)\r\n\r\n        // convert response to json\r\n        .then(response => response.json())\r\n\r\n        // take json and dispatch a add dish action\r\n        .then(response => { \r\n            alert(JSON.stringify(response, null, 2));\r\n            dispatch(feedbackPostSuccess(response));\r\n         } )\r\n\r\n        // catch any of the thrown errors\r\n        .catch(error => dispatch(feedbackPostFailed(error.message)));\r\n\r\n};\r\n\r\n","\r\n// action types for reducers\r\n\r\n// comment sent to json-server and redux state actions\r\nexport const COMMENT_POSTING = 'COMMENT_POSTING';\r\nexport const COMMENT_POST_FAILED = 'COMMENT_POST_FAILED';\r\nexport const ADD_COMMENT = 'ADD_COMMENT';\r\n\r\n// feedback sent to json-server and redux state actions\r\nexport const FEEDBACK_POST_ATTEMPT = 'FEEDBACK_POST_ATTEMPT';\r\nexport const FEEDBACK_POST_FAILED = 'FEEDBACK_POST_FAILED';\r\nexport const FEEDBACK_POST_SUCCESS = 'FEEDBACK_POST_SUCCESS';\r\n\r\n// dish list from server actions\r\nexport const DISHLIST_LOADING = 'DISHLIST_LOADING';\r\nexport const DISHLIST_FAILED = 'DISHLIST_FAILED';\r\nexport const SET_DISHLIST = 'SET_DISHLIST';\r\n\r\n// comment list from server actions\r\nexport const COMMENTLIST_LOADING = 'COMMENTLIST_LOADING';\r\nexport const COMMENTLIST_FAILED = 'COMMENTLIST_FAILED';\r\nexport const SET_COMMENTLIST = 'SET_COMMENTLIST';\r\n\r\n// comment list from server actions\r\nexport const PROMOLIST_LOADING = 'PROMOLIST_LOADING';\r\nexport const PROMOLIST_FAILED = 'PROMOLIST_FAILED';\r\nexport const SET_PROMOLIST = 'SET_PROMOLIST';\r\n\r\n// leader list from server actions\r\nexport const LEADERLIST_LOADING = 'LEADERLIST_LOADING';\r\nexport const LEADERLIST_FAILED = 'LEADERLIST_FAILED';\r\nexport const SET_LEADERLIST = 'SET_LEADERLIST';\r\n","import React, { Component } from 'react';\r\n\r\n// reasct nav bar imports\r\nimport { Nav, Navbar, NavbarBrand, NavbarToggler, Collapse, NavItem, Jumbotron } from 'reactstrap';\r\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\r\n\r\nimport { Form, FormGroup, Label, Input } from 'reactstrap';\r\n\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n\r\n    constructor(props) {\r\n        \r\n        super(props);\r\n    \r\n        this.state = {\r\n          isNavOpen: false,\r\n          isModalOpen: false\r\n        };\r\n\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n\r\n      }\r\n\r\n    toggleNav() {\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        });\r\n    }\r\n\r\n    toggleModal() {\r\n\r\n        this.setState({ \r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n\r\n    }\r\n\r\n    handleLogin(event) {\r\n        this.toggleModal();\r\n        alert(\"Username: \" + this.username.value + \" Password: \" + this.password.value\r\n            + \" Remember: \" + this.remember.checked);\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return(\r\n            <React.Fragment>\r\n\r\n                <Navbar dark expand=\"md\">\r\n                    <div className=\"container\">\r\n                    <NavbarToggler onClick={() => {this.toggleNav()}} />\r\n                        <NavbarBrand className=\"mr-auto\" href=\"/\"><img src='assets/images/logo.png' height=\"30\" width=\"41\" alt='Ristorante Con Fusion' /></NavbarBrand>\r\n                        <Collapse isOpen={this.state.isNavOpen} navbar>\r\n                            <Nav navbar>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\"  to='/home'><i className=\"fa fa-home fa-lg\"></i> Home</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to='/aboutus'><i className=\"fa fa-info fa-lg\"></i> About Us</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\"  to='/menu'><i className=\"fa fa-list fa-lg\"></i> Menu</NavLink>\r\n                                </NavItem>\r\n                                <NavItem>\r\n                                    <NavLink className=\"nav-link\" to='/contactus'><i className=\"fa fa-address-card fa-lg\"></i> Contact Us</NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                            <NavItem>\r\n                                <Button id=\"loginButton\" outline onClick={ () => { this.toggleModal(); } }>\r\n                                    <i className=\"fa fa-sign-in\"> Login</i>\r\n                                </Button>\r\n                            </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar>\r\n\r\n                <Jumbotron>\r\n                    <div className=\"container\">\r\n                        <div className=\"row row-header\">\r\n                            <div className=\"col-12 col-sm-6\">\r\n                                <h1>Ristorante con Fusion</h1>\r\n                                <p>We take inspiration from the World's best cuisines, and create a unique fusion experience. Our lipsmacking creations will tickle your culinary senses!</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Jumbotron>\r\n\r\n                <Modal\r\n                    isOpen={this.state.isModalOpen}\r\n                    toggle={ () => { this.toggleModal(); } }\r\n                >\r\n                    <ModalHeader toggle={ () => { this.toggleModal(); } }>\r\n                        Login\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                    <Form onSubmit={this.handleLogin}>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"username\">Username</Label>\r\n                                <Input type=\"text\" id=\"username\" name=\"username\"\r\n                                    innerRef={(input) => this.username = input} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label htmlFor=\"password\">Password</Label>\r\n                                <Input type=\"password\" id=\"password\" name=\"password\"\r\n                                    innerRef={(input) => this.password = input}  />\r\n                            </FormGroup>\r\n                            <FormGroup check>\r\n                                <Label check>\r\n                                    <Input type=\"checkbox\" name=\"remember\"\r\n                                    innerRef={(input) => this.remember = input}  />\r\n                                    Remember me\r\n                                </Label>\r\n                            </FormGroup>\r\n                            <Button className=\"darkButton\" type=\"submit\" value=\"submit\">Login</Button>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Footer(props) {\r\n    return(\r\n    <div className=\"footer\">\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-center\">             \r\n                <div className=\"col-4 offset-1 col-sm-2\">\r\n                    <h5>Links</h5>\r\n                    <ul className=\"list-unstyled\">\r\n                        <li><Link to='/home'>Home</Link></li>\r\n                        <li><Link to='/aboutus'>About Us</Link></li>\r\n                        <li><Link to='/menu'>Menu</Link></li>\r\n                        <li><Link to='/contactus'>Contact Us</Link></li>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"col-7 col-sm-5\">\r\n                    <h5>Our Address</h5>\r\n                    <address>\r\n\t\t              121, Clear Water Bay Road<br />\r\n\t\t              Clear Water Bay, Kowloon<br />\r\n\t\t              HONG KONG<br />\r\n\t\t              <i className=\"fa fa-phone fa-lg\"></i>: +852 1234 5678<br />\r\n\t\t              <i className=\"fa fa-fax fa-lg\"></i>: +852 8765 4321<br />\r\n\t\t              <i className=\"fa fa-envelope fa-lg\"></i>: <a href=\"mailto:confusion@food.net\">\r\n                         confusion@food.net</a>\r\n                    </address>\r\n                </div>\r\n                <div className=\"col-12 col-sm-4 align-self-center\">\r\n                    <div className=\"text-center\">\r\n                        <a className=\"btn btn-social-icon btn-google\" href=\"http://google.com/+\"><i className=\"fa fa-google-plus\"></i></a>\r\n                        <a className=\"btn btn-social-icon btn-facebook\" href=\"http://www.facebook.com/profile.php?id=\"><i className=\"fa fa-facebook\"></i></a>\r\n                        <a className=\"btn btn-social-icon btn-linkedin\" href=\"http://www.linkedin.com/in/\"><i className=\"fa fa-linkedin\"></i></a>\r\n                        <a className=\"btn btn-social-icon btn-twitter\" href=\"http://twitter.com/\"><i className=\"fa fa-twitter\"></i></a>\r\n                        <a className=\"btn btn-social-icon btn-google\" href=\"http://youtube.com/\"><i className=\"fa fa-youtube\"></i></a>\r\n                        <a className=\"btn btn-social-icon\" href=\"mailto:\"><i className=\"fa fa-envelope-o\"></i></a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row justify-content-center\">             \r\n                <div className=\"col-auto\">\r\n                    <p>© Copyright 2018 Ristorante Con Fusion</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\n\r\nexport const Loading = () => {\r\n    return(\r\n        <div className=\"col-12\">\r\n            <i className=\"fa fa-spinner fa-pulse fa-3x fa-fw text-primary\"></i>\r\n            <p>Loading...</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Card, CardImg, CardText, CardBody,\r\n    CardTitle, CardSubtitle} from 'reactstrap';\r\n\r\nimport { Loading } from './LoadingComponent';\r\n\r\nimport { serverUrl } from '../shared/serverUrl';\r\n\r\n// react animations\r\nimport { FadeTransform } from 'react-animation-components';\r\n\r\nfunction RenderCard(props) {\r\n\r\n    const { item, isLoading, errorMessage } = props;\r\n\r\n    // check if dishes are loading\r\n    if (isLoading) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Loading></Loading>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    if (errorMessage) {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">            \r\n                    <h4>{errorMessage}</h4>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    return(\r\n        <FadeTransform\r\n            in\r\n            transformProps={{\r\n                exitTransform: 'scale(0.5) translate(-50%)'\r\n            }}\r\n        >\r\n            <Card>\r\n                <CardImg src={serverUrl + item.image} alt={item.name} />\r\n                <CardBody>\r\n                <CardTitle>{item.name}</CardTitle>\r\n                {item.designation ? <CardSubtitle>{item.designation}</CardSubtitle> : null }\r\n                <CardText>{item.description}</CardText>\r\n                </CardBody>\r\n            </Card>\r\n        </FadeTransform>\r\n    );\r\n\r\n}\r\n\r\n\r\nfunction Home(props) {\r\n\r\n    const { dishInfo, promoInfo, leaderInfo } = props;\r\n\r\n    // get the featured dish\r\n    let featuredDish = dishInfo.dishList.filter((dish) => (dish.featured))[0];\r\n    let featuredPromo = promoInfo.promoList.filter((promo) => (promo.featured))[0];\r\n    let featuredLeader = leaderInfo.leaderList.filter((leader) => (leader.featured))[0];\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row align-items-start\">\r\n                <div className=\"col-12 col-md m-1\">\r\n                    <RenderCard \r\n                        item={featuredDish}\r\n                        isLoading={dishInfo.isLoading}\r\n                        errorMessage={dishInfo.errorMessage}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md m-1\">\r\n                    <RenderCard\r\n                        item={featuredPromo}\r\n                        isLoading={promoInfo.isLoading}\r\n                        errorMessage={promoInfo.errorMessage}\r\n                    />\r\n                </div>\r\n                <div className=\"col-12 col-md m-1\">\r\n                    <RenderCard\r\n                        item={featuredLeader}\r\n                        isLoading={leaderInfo.isLoading}\r\n                        errorMessage={leaderInfo.errorMessage}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Card, CardImg, CardImgOverlay, CardTitle } from 'reactstrap';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { serverUrl } from '../shared/serverUrl';\r\n\r\nimport { Loading } from './LoadingComponent';\r\n\r\nfunction MenuItem(props) {\r\n\r\n    const { dish }  = props;\r\n\r\n    return(\r\n\r\n        <Card className=\"dishCard\">\r\n            <Link to={`/menu/${dish.id}`}>\r\n                <CardImg src={serverUrl + dish.image} alt={dish.name} />\r\n                <CardImgOverlay>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                </CardImgOverlay>\r\n            </Link>\r\n        </Card>\r\n\r\n    );\r\n\r\n}\r\n\r\nclass Menu extends Component {\r\n\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        // add dish list to the apps state\r\n        this.state = {\r\n            selectedDishId: undefined\r\n        };\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        // construct a list of card items\r\n        const menu = this.props.dishInfo.dishList.map(\r\n            (dish, index) => {\r\n\r\n                return (\r\n                    // col-12 col-md-6 means:\r\n                    // on mobile: extra small to small one column for all 12 columns\r\n                    // on laptop/tablet for medium to extra largre screens, each card occupies 5 columns\r\n                    <div key={index} className=\"col-12 col-md-6\">\r\n                        <MenuItem \r\n                            dish={dish}\r\n                            >\r\n                        </MenuItem>\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        if (this.props.dishInfo.isLoading) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Loading></Loading>\r\n                    </div>\r\n                </div>\r\n    \r\n            );\r\n        }\r\n    \r\n        if (this.props.dishInfo.errorMessage) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <h4>{this.props.dishInfo.errorMessage}</h4>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n\r\n        // use list of items in each row of container/grid\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Menu</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {menu}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Menu;\r\n","import React, { Component } from 'react';\r\n\r\nimport { Breadcrumb, BreadcrumbItem} from 'reactstrap';\r\nimport { Button, Label, Row, Col } from 'reactstrap';\r\nimport { Control, Form, Errors } from 'react-redux-form';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n//\r\n// form validation functions\r\n//\r\nconst required = (val) => val && (val.length>0);\r\n// function of functions\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\n\r\nconst isNumber = (val) => !isNaN(Number(val));\r\n\r\nconst emailRegex = /^([a-zA-Z0-9_\\-.]+)@([a-zA-Z0-9_\\-.]+).([a-zA-Z]{2,5})$/;\r\nconst validEmail = (val) => emailRegex.test(val);\r\n\r\nclass ContactComponent extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        \r\n    }\r\n\r\n    handleSubmit(values) {\r\n\r\n        // console.log('Current form values = ' + JSON.stringify(values));\r\n        // alert('Current State is: ' + JSON.stringify(values, null, 2));\r\n\r\n        // send feedback to server\r\n        this.props.postFeedback(values);\r\n\r\n        // reset the feedback form\r\n        this.props.resetFeedbackForm();\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active><Link to='/contactus'>Contact Us</Link></BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                    <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                            <h5>Our Address</h5>\r\n                            <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                            </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <h3>Send us your feedback</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                    <Form\r\n                        model=\"feedback\"\r\n                        onSubmit={(values) => this.handleSubmit(values)}\r\n                    >\r\n                    <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers ',\r\n                                            maxLength: 'Must be 15 numbers or less ',\r\n                                            isNumber: 'Must be a number '\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\"\r\n                                                 /> {' '}\r\n                                                <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10, offset: 2}}>\r\n                                    <Button className=\"darkButton\" type=\"submit\">\r\n                                    Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default ContactComponent;","import React from 'react';\nimport { Breadcrumb, BreadcrumbItem, Card, CardBody, CardHeader, Media } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\n// react animations\nimport { Fade, Stagger } from 'react-animation-components';\n\nimport { serverUrl } from '../shared/serverUrl';\n\nimport { Loading } from './LoadingComponent';\n\n\nfunction RenderLeader(props) {\n\n    const { leaderList } = props;\n\n    const leaderItems = leaderList.map((leader, index) => {\n        return (\n            <Fade in>\n                <div key={index} className=\"col-12 mt-5\">\n                    <Media tag=\"li\">\n                        <Media left middle>\n                            <Media object src={serverUrl + leader.image} alt={leader.name} />\n                        </Media>\n                        <Media body className=\"ml-5\">\n                        <Media heading>{leader.name}</Media>\n                        <p>{leader.designation}</p>\n                        <p>{leader.description}</p>\n                        </Media>\n                    </Media>\n                </div>\n            </Fade>\n\n        );\n    });\n\n    return(\n        <Media list>\n            {leaderItems}\n        </Media>\n    );\n}\n\n\nfunction About(props) {\n\n    const { leaderInfo } = props;\n\n    if (leaderInfo.isLoading) {\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Loading></Loading>\n                </div>\n            </div>\n\n        );\n    }\n\n    if (leaderInfo.errorMessage) {\n        return(\n            <div className=\"container\">\n                <div className=\"row\">            \n                    <h4>{leaderInfo.errorMessage}</h4>\n                </div>\n            </div>\n        );\n    }\n\n    let leaderList = leaderInfo.leaderList;\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <Breadcrumb>\n                    <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\n                    <BreadcrumbItem active>About Us</BreadcrumbItem>\n                </Breadcrumb>\n                <div className=\"col-12\">\n                    <h3>About Us</h3>\n                    <hr />\n                </div>                \n            </div>\n            <div className=\"row row-content\">\n                <div className=\"col-12 col-md-6\">\n                    <h2>Our History</h2>\n                    <p>Started in 2010, Ristorante con Fusion quickly established itself as a culinary icon par excellence in Hong Kong. With its unique brand of world fusion cuisine that can be found nowhere else, it enjoys patronage from the A-list clientele in Hong Kong.  Featuring four of the best three-star Michelin chefs in the world, you never know what will arrive on your plate the next time you visit us.</p>\n                    <p>The restaurant traces its humble beginnings to <em>The Frying Pan</em>, a successful chain started by our CEO, Mr. Peter Pan, that featured for the first time the world's best cuisines in a pan.</p>\n                </div>\n                <div className=\"col-12 col-md-5\">\n                    <Card>\n                        <CardHeader className=\"bg-primary text-white\">Facts At a Glance</CardHeader>\n                        <CardBody>\n                            <dl className=\"row p-1\">\n                                <dt className=\"col-6\">Started</dt>\n                                <dd className=\"col-6\">3 Feb. 2013</dd>\n                                <dt className=\"col-6\">Major Stake Holder</dt>\n                                <dd className=\"col-6\">HK Fine Foods Inc.</dd>\n                                <dt className=\"col-6\">Last Year's Turnover</dt>\n                                <dd className=\"col-6\">$1,250,375</dd>\n                                <dt className=\"col-6\">Employees</dt>\n                                <dd className=\"col-6\">40</dd>\n                            </dl>\n                        </CardBody>\n                    </Card>\n                </div>\n                <div className=\"col-12\">\n                    <Card>\n                        <CardBody className=\"bg-faded\">\n                            <blockquote className=\"blockquote\">\n                                <p className=\"mb-0\">You better cut the pizza in four pieces because\n                                    I'm not hungry enough to eat six.</p>\n                                <footer className=\"blockquote-footer\">Yogi Berra,\n                                <cite title=\"Source Title\">The Wit and Wisdom of Yogi Berra,\n                                    P. Pepe, Diversion Books, 2014</cite>\n                                </footer>\n                            </blockquote>\n                        </CardBody>\n                    </Card>\n                </div>\n            </div>\n            <div className=\"row row-content\">\n                <div className=\"col-12\">\n                    <h2>Corporate Leadership</h2>\n                </div>\n                <div className=\"col-12\">\n                    <Stagger in>\n                        <RenderLeader leaderList={leaderList}>\n                        </RenderLeader>\n                    </Stagger>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default About;    ","import React, { Component } from 'react';\r\nimport { Card, CardImg, CardBody, CardText, CardTitle } from 'reactstrap';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\n\r\nimport { Button, Row, Col } from 'reactstrap';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\n\r\n// react animations\r\nimport { FadeTransform, Fade, Stagger } from 'react-animation-components';\r\n\r\nimport { Loading } from './LoadingComponent';\r\n\r\nimport { serverUrl } from '../shared/serverUrl';\r\n\r\n\r\n\r\n\r\n//\r\n// form validation functions\r\n//\r\nconst required = (val) => { return (val && (val.length>0)); }\r\n// function of functions\r\nconst maxLength = (len) => (val) => { return ( !(val) || (val.length <= len) ); }\r\nconst minLength = (len) => (val) => { return ( val && (val.length >= len) ); }\r\n\r\nconst requiredSelect = (val) => {  return !isNaN(val); }\r\n\r\n// comment form component\r\nfunction CommentForm(props) {\r\n\r\n    const { toggleModal } = props;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Button \r\n                className=\"darkButton\"\r\n                id=\"commentFormButton\"\r\n                outline onClick={ () => { toggleModal(); } }\r\n            >\r\n            <i className=\"fa fa-edit fa-lg\"></i>\r\n            Submit Comment\r\n            </Button>\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\n// display dish details\r\nfunction RenderDish(props) {\r\n\r\n    const { dish } = props;\r\n\r\n    if (dish != null) {\r\n        return (\r\n            <React.Fragment>\r\n                <FadeTransform\r\n                    in\r\n                    transformProps={{\r\n                        exitTransform: 'scale(0.5) translate(-50%)'\r\n                    }}\r\n                >\r\n                    <Card \r\n                        className=\"dishDetailCard\">\r\n                        <CardImg src={serverUrl + dish.image} alt={dish.name} />\r\n                        <CardBody>\r\n                            <CardTitle>{dish.name}</CardTitle>\r\n                        </CardBody>\r\n                        <CardText className=\"dishDetailCardText\">\r\n                            {dish.description}\r\n                        </CardText> \r\n                    </Card>\r\n                </FadeTransform>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n// render the dish comments\r\nfunction RenderCommentList(props) {\r\n\r\n    const { dishCommentList, toggleModal, postComment, dishId } = props;\r\n\r\n    // date.toLocaleDateString('en-US', options));\r\n    // <pre>{JSON.stringify(commentFormatted)}</pre>\r\n\r\n    let commentItems = undefined;\r\n\r\n    if (dishCommentList == null) {\r\n\r\n        return (<div></div>);\r\n        \r\n    } else {\r\n\r\n        // construct and format the unstyled list item comments\r\n\r\n        // date formatting\r\n        const dateOptions = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };\r\n\r\n\r\n        commentItems = dishCommentList.map(\r\n            (x, index) => {\r\n\r\n                let aDate = new Date(x.date);\r\n\r\n                let d = aDate.toLocaleDateString(undefined, dateOptions)\r\n\r\n                return (\r\n                    <Fade in>\r\n                        <div className=\"dishComment\" key={index}>\r\n                            <li>{x.comment}</li>\r\n                            <li>-- {x.author}, {d}</li>\r\n                        </div>\r\n                    </Fade>\r\n                );\r\n            });\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Card \r\n                    className=\"dishCommentCard\">\r\n                    <CardBody>\r\n                        <CardTitle>Comments</CardTitle>\r\n                    </CardBody>\r\n                    <CardText className=\"dishDetailCardText\">\r\n                        <ul className=\"list-unstyled\">\r\n                            <Stagger in>\r\n                                {commentItems}\r\n                            </Stagger>\r\n                        </ul>\r\n                    </CardText> \r\n                    <CommentForm\r\n                        toggleModal = { toggleModal }\r\n                        postComment={postComment}\r\n                        dishId={dishId}\r\n                    >\r\n                    </CommentForm>\r\n                </Card>\r\n            </React.Fragment>\r\n        );\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass DishDetail extends Component {\r\n\r\n    constructor(props) {\r\n        \r\n        super(props);\r\n    \r\n        this.state = {\r\n            isModalOpen: false,\r\n            isValidComment: false\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n      }\r\n\r\n    toggleModal() {\r\n\r\n        this.setState({ \r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n\r\n    }\r\n\r\n    handleSubmit(values) {\r\n\r\n        // toggle off the modal\r\n        this.toggleModal();\r\n\r\n        // alert('Current State is: ' + JSON.stringify(values, null, 2));\r\n\r\n        // add comment to list by dispatching a postComment action to update\r\n        // the react redux store/state\r\n        this.props.postComment(this.props.dish.id, values.rating, values.name, values.comment);\r\n    \r\n    }\r\n\r\n    handleUpdate(form) {\r\n        // console.log('form = ',form);\r\n        // console.log('form.rating.valid = ', form.rating.valid);\r\n        // console.log('form.name.valid = ', form.name.valid);\r\n\r\n        // to enable/disable submut button\r\n        this.setState({ \r\n            isValidComment: (form.rating.valid && form.name.valid && form.comment.valid)\r\n        });\r\n\r\n    }\r\n\r\n    // console.log(props);\r\n\r\n    render() {\r\n\r\n        // check if dishes are loading\r\n        if (this.props.isLoading) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Loading></Loading>\r\n                    </div>\r\n                </div>\r\n\r\n            );\r\n        }\r\n\r\n        if (this.props.errorMessage) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <h4>{this.props.errorMessage}</h4>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        let dish = this.props.dish;\r\n        let dishCommentList = this.props.dishCommentList;\r\n\r\n        if (dish != null) {\r\n            return (\r\n            <React.Fragment>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Breadcrumb>\r\n                            <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                            <BreadcrumbItem active><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n                            <BreadcrumbItem active>{dish.name}</BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12\">\r\n                                <h3>{dish.name}</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-12 col-md-6\">\r\n                            <RenderDish dish={dish}></RenderDish>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-6\">\r\n                            <RenderCommentList \r\n                                dishCommentList={dishCommentList}\r\n                                toggleModal={ () => { this.toggleModal(); } }\r\n                                postComment={this.props.postComment}\r\n                                dishId={this.props.dish.id}\r\n                            >\r\n\r\n                                </RenderCommentList>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Modal\r\n                    isOpen={this.state.isModalOpen}\r\n                    toggle={ () => { this.toggleModal(); } }\r\n                >\r\n                    <ModalHeader toggle={ () => { this.toggleModal(); } }>\r\n                        Comment on {dish.name}\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    <LocalForm \r\n                                        onSubmit={(values) => this.handleSubmit(values)}\r\n                                        onUpdate={(form) => this.handleUpdate(form)}\r\n                                    >\r\n\r\n                                        Rating\r\n                                        <Row className=\"form-group\">\r\n                                            <Col>\r\n                                                <Control.select model=\".rating\" name=\"rating\"\r\n                                                    className=\"form-control\"\r\n                                                    validators={{\r\n                                                        requiredSelect\r\n                                                    }}\r\n                                                >\r\n                                                    <option>--</option>\r\n                                                    <option>5</option>\r\n                                                    <option>4</option>\r\n                                                    <option>3</option>\r\n                                                    <option>2</option>\r\n                                                    <option>1</option>\r\n                                                </Control.select>\r\n                                                <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".rating\"\r\n                                                    show=\"touched\"\r\n                                                    messages={{\r\n                                                        requiredSelect: 'Please select a rating'\r\n                                                    }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        \r\n                                        Your Name\r\n                                        <Row className=\"form-group\">\r\n                                            <Col>\r\n                                                <Control.text model=\".name\" id=\"name\" name=\"name\"\r\n                                                    placeholder=\"Name\"\r\n                                                    className=\"form-control\"\r\n                                                    validators={{\r\n                                                        required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                                    }}\r\n                                                />\r\n                                                <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".name\"\r\n                                                    show=\"touched\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        minLength: 'Must be greater than 2 characters',\r\n                                                        maxLength: 'Must be 15 characters or less'\r\n                                                    }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n\r\n                                        Comment\r\n                                        <Row className=\"form-group\">\r\n                                            <Col>\r\n                                                <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                                    rows=\"6\"\r\n                                                    className=\"form-control\" \r\n                                                    validators={{\r\n                                                        required, maxLength: maxLength(1000)\r\n                                                    }}\r\n                                                />\r\n                                                <Errors\r\n                                                    className=\"text-danger\"\r\n                                                    model=\".comment\"\r\n                                                    show=\"touched\"\r\n                                                    messages={{\r\n                                                        required: 'Required',\r\n                                                        maxLength: 'Must be 1000 characters or less'\r\n                                                    }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        <Row className=\"form-group\">\r\n                                            <Col>\r\n                                                <Button className=\"darkButton\" type=\"submit\"\r\n                                                    disabled={!this.state.isValidComment}\r\n                                                >\r\n                                                Submit\r\n                                                </Button>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </LocalForm>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </React.Fragment>\r\n            )\r\n        } else {\r\n            return (<div></div>);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default DishDetail;\r\n\r\n","import React, { Component } from 'react';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { postComment, postFeedback, fetchDishList, fetchCommentList, fetchPromoList, fetchLeaderList } from '../redux/actionCreators';\r\n\r\n// import the predefined actions for redux forms\r\nimport { actions } from 'react-redux-form';\r\n\r\n// react animations\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\n\r\n// import  components\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport Home from './HomeComponent';\r\nimport Menu from './MenuComponent';\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\nimport DishDetail from './DishDetailComponent';\r\n\r\n// maps a redux store state (in reducer.js) into props that will be made\r\n// available for react components by the provider component\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dishInfo: state.dishInfo,\r\n        commentInfo: state.commentInfo,\r\n        promoInfo: state.promoInfo,\r\n        leaderInfo: state.leaderInfo\r\n    }\r\n}\r\n\r\n// maps the dispatch actions to react components\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        postComment: (dishId, rating, author, comment) => {\r\n            dispatch(postComment(dishId, rating, author, comment));\r\n            },\r\n        postFeedback: (dishId, rating, author, comment) => {\r\n            dispatch(postFeedback(dishId, rating, author, comment));\r\n            },\r\n        fetchDishList: () => {\r\n            dispatch(fetchDishList());\r\n            },\r\n        fetchCommentList: () => {\r\n            dispatch(fetchCommentList());\r\n            },\r\n        fetchPromoList: () => {\r\n            dispatch(fetchPromoList());\r\n            },\r\n        fetchLeaderList: () => {\r\n            dispatch(fetchLeaderList());\r\n            },\r\n        resetFeedbackForm: () => {\r\n            dispatch(actions.reset('feedback'));\r\n            }\r\n\r\n    }\r\n}\r\n\r\nclass MainComponent extends Component {\r\n\r\n    // lifecycle componentDidMount method of component that gets called just after component \r\n    // is mounted into view of application\r\n    componentDidMount() {\r\n\r\n        // fetch the data from server when Main component is mounted\r\n        this.props.fetchDishList();\r\n        this.props.fetchCommentList();\r\n        this.props.fetchPromoList();\r\n        this.props.fetchLeaderList();\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const HomePage = () => {\r\n\r\n            console.log(\"this.props = \", this.props);\r\n\r\n            return(\r\n                <Home\r\n                dishInfo={this.props.dishInfo}\r\n                promoInfo={this.props.promoInfo}\r\n                leaderInfo={this.props.leaderInfo}\r\n                >\r\n                </Home>\r\n            );\r\n\r\n        }\r\n\r\n        const DishWithId = (props) => {\r\n\r\n            const { match } = props;\r\n\r\n            let menuDishId = parseInt(match.params.dishId);\r\n\r\n            console.log(\"menuDishId = \", menuDishId);\r\n\r\n            let selectedDishList = this.props.dishInfo.dishList.filter((dish) => dish.id === menuDishId);\r\n\r\n            // if the dish item does not exist, redirect back to the menu\r\n            if (selectedDishList.length === 0) {\r\n                // return(<div>Dish id {menuDishId.id} not found.</div>);\r\n                return (<Redirect to=\"/menu\" />);\r\n            }\r\n\r\n            let selectedDish = selectedDishList[0];\r\n\r\n            let selectedDishCommentList = this.props.commentInfo.commentList.filter(\r\n                (comment) => comment.dishId === menuDishId);\r\n\r\n            console.log(\"selectedDish = \", selectedDish);\r\n            console.log(\"selectedDishCommentList = \", selectedDishCommentList);  \r\n\r\n            return (\r\n                <DishDetail dish={selectedDish}\r\n                            dishCommentList={selectedDishCommentList}\r\n                            postComment={this.props.postComment}\r\n                >\r\n                </DishDetail>\r\n            );\r\n        }\r\n\r\n        return (\r\n        <div>\r\n            <Header></Header>\r\n                <TransitionGroup>\r\n                    <CSSTransition key={this.props.location.key} classNames=\"page\" timeout={150}>\r\n                        <Switch>\r\n\r\n                            <Route path='/home' component={HomePage}\r\n                            >\r\n                            </Route>\r\n\r\n                            <Route exact path='/aboutus' component={\r\n                                () => <About\r\n                                    leaderInfo={this.props.leaderInfo}\r\n                                    >\r\n                                    </About>}\r\n                            >\r\n                            </Route>\r\n\r\n                            <Route exact path='/menu' component={\r\n                                () => <Menu \r\n                                        dishInfo={this.props.dishInfo}\r\n                                    > \r\n                                    </Menu>}\r\n                            >\r\n                            </Route>\r\n\r\n                            <Route path='/menu/:dishId' component={DishWithId}>\r\n                            </Route>\r\n\r\n                            <Route exact path='/contactus' component={\r\n                                () => <Contact\r\n                                        resetFeedbackForm={this.props.resetFeedbackForm}\r\n                                        postFeedback={this.props.postFeedback}\r\n                                    >\r\n                                </Contact>}\r\n                            >\r\n                            </Route>\r\n\r\n                            <Redirect to=\"/home\" />\r\n\r\n                        </Switch>\r\n                    </CSSTransition>\r\n                </TransitionGroup>\r\n            <Footer></Footer>\r\n        </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n// connect main component to redux with router\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MainComponent));\r\n","import * as ActionTypes from './actionTypes';\r\n\r\nconst initialState = {\r\n    isLoading: true, // defaults to true, since the first thing to happen is to load data from the server\r\n    errorMessage: null,\r\n    dishList: []\r\n};\r\n\r\nexport const DishInfoReducer = (state = initialState, action) => {\r\n\r\n    let newState = undefined;\r\n\r\n    switch(action.type) {\r\n\r\n        case ActionTypes.SET_DISHLIST:\r\n\r\n            // create new state with some fields changed\r\n            newState = {...state, isLoading: false, errorMessage: null, dishList: action.payload};\r\n            \r\n            return newState;\r\n\r\n        case ActionTypes.DISHLIST_LOADING:\r\n\r\n            // create new state\r\n            newState = Object.assign({}, initialState, { isLoading: true });\r\n\r\n            return newState;\r\n\r\n        case ActionTypes.DISHLIST_FAILED:\r\n\r\n            // create new state with some fields changed\r\n            newState = {...state, isLoading: false, errorMessage: action.payload, dishList: []};\r\n\r\n            return newState;\r\n\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n","// shared data\r\nimport * as ActionTypes from './actionTypes';\r\n\r\nconst initialState = {\r\n    isLoading: true, // defaults to true, since the first thing to happen is to load data from the server\r\n    isPosting: false,\r\n    errorMessage: null,\r\n    commentList: []\r\n};\r\n\r\nexport const CommentInfoReducer = (state = initialState, action) => {\r\n\r\n    let newState = undefined;\r\n\r\n    switch(action.type) {\r\n\r\n\r\n        //\r\n        // actions for loading and setting the comment list\r\n        //\r\n\r\n        case ActionTypes.SET_COMMENTLIST:\r\n\r\n            // create new state with some fields changed\r\n            newState = {...state, isLoading: false, errorMessage: null, commentList: action.payload}\r\n            \r\n            return newState;\r\n\r\n        case ActionTypes.COMMENTLIST_LOADING:\r\n\r\n            // create new state\r\n            newState = Object.assign({}, initialState, { isLoading: true });\r\n\r\n            return newState;\r\n\r\n        case ActionTypes.COMMENTLIST_FAILED:\r\n\r\n            // create new state with some fields changed\r\n            newState = {...state, isLoading: false, errorMessage: action.payload, commentList: []}\r\n\r\n            return newState;\r\n\r\n        //\r\n        // actions for handling new comments from users\r\n        //\r\n            \r\n        case ActionTypes.ADD_COMMENT:\r\n\r\n            // create a new state with some fields changed\r\n            newState = {...state, isPosting: false, commentList: []};\r\n\r\n            // copy the existing commentList\r\n            newState.commentList = [...state.commentList];\r\n\r\n            // append the new comment from the action to the list\r\n            newState.commentList.push(action.payload);\r\n\r\n            // return a new state (commment list)\r\n            return newState;\r\n\r\n        case ActionTypes.COMMENT_POSTING:\r\n\r\n            newState = {...state, isPosting: true };\r\n\r\n            return newState;\r\n\r\n        case ActionTypes.COMMENT_POST_FAILED:\r\n\r\n            // create a new state with some fields changed, put error message in comments area fornow\r\n            newState = {...state, errorMessage: action.payload, commentList: []};\r\n\r\n            // put the error message comment from the action into the list\r\n            // make a fake error message comment\r\n            const errorComment = {\r\n                id: 0,\r\n                dishId: 1,\r\n                rating: 1,\r\n                comment: action.payload,\r\n                author: \"None\",\r\n                date: new Date().toISOString()\r\n              };\r\n\r\n            newState.commentList.push(errorComment);\r\n\r\n\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n","import * as ActionTypes from './actionTypes';\r\n\r\nconst initialState = {\r\n    isLoading: true, // defaults to true, since the first thing to happen is to load data from the server\r\n    errorMessage: null,\r\n    promoList: []\r\n};\r\n\r\nexport const PromoInfoReducer = (state = initialState, action) => {\r\n\r\n    let newState = undefined;\r\n\r\n    switch(action.type) {\r\n\r\n        case ActionTypes.SET_PROMOLIST:\r\n\r\n            // create new state with some fields changed\r\n            newState = {...state, isLoading: false, errorMessage: null, promoList: action.payload};\r\n            \r\n            return newState;\r\n\r\n        case ActionTypes.PROMOLIST_LOADING:\r\n\r\n            // create new state\r\n            newState = Object.assign({}, initialState, { isLoading: true });\r\n\r\n            return newState;\r\n\r\n        case ActionTypes.PROMOLIST_FAILED:\r\n\r\n            // create new state with some fields changed\r\n            newState = {...state, isLoading: false, errorMessage: action.payload, promoList: []};\r\n\r\n            return newState;\r\n\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n","import * as ActionTypes from './actionTypes';\r\n\r\nconst initialState = {\r\n    isLoading: true, // defaults to true, since the first thing to happen is to load data from the server\r\n    errorMessage: null,\r\n    leaderList: []\r\n};\r\n\r\nexport const LeaderInfoReducer = (state = initialState, action) => {\r\n\r\n    let newState = undefined;\r\n\r\n    switch(action.type) {\r\n\r\n        case ActionTypes.SET_LEADERLIST:\r\n\r\n            // create new state with some fields changed\r\n            newState = {...state, isLoading: false, errorMessage: null, leaderList: action.payload};\r\n            \r\n            return newState;\r\n\r\n        case ActionTypes.LEADERLIST_LOADING:\r\n\r\n            // create new state\r\n            newState = Object.assign({}, initialState, { isLoading: true });\r\n\r\n            return newState;\r\n\r\n        case ActionTypes.LEADERLIST_FAILED:\r\n\r\n            // create new state with some fields changed\r\n            newState = {...state, isLoading: false, errorMessage: action.payload, leaderList: []};\r\n\r\n            return newState;\r\n\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n","\r\n\r\n// redux form that will be saved in the redux store\r\nexport const InitialFeedbackForm = {\r\n    firstname: '',\r\n    lastname: '',\r\n    telnum: '',\r\n    email: '',\r\n    agree: false,\r\n    contactType: 'Tel.',\r\n    message: ''\r\n}","import { createStore, combineReducers } from 'redux';\r\nimport { createForms} from 'react-redux-form';\r\n\r\n// import redux store elements\r\nimport { DishInfoReducer } from './dishInfoReducer';\r\nimport { CommentInfoReducer } from './commentInfoReducer';\r\nimport { PromoInfoReducer } from './promoInfoReducer';\r\nimport { LeaderInfoReducer } from './leaderInfoReducer';\r\nimport { InitialFeedbackForm } from './forms';\r\n\r\n// add redux dev tools with action tracing turned on\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport * as actionCreators from './actionCreators';\r\n\r\n// redux thunk middleware\r\nimport thunk from \"redux-thunk\";\r\nimport logger from \"redux-logger\";\r\nimport { applyMiddleware } from 'redux';\r\n\r\n// middleware enhancers\r\nconst middlewareEnhancers = applyMiddleware(thunk, logger);\r\n\r\n// enhancers w/ action tracing, and middleware\r\nconst composedEnhancers = composeWithDevTools({\r\n    actionCreators,\r\n    trace: true,\r\n    traceLimit: 25\r\n    }\r\n);\r\n\r\nconst allEnhancers = composedEnhancers(middlewareEnhancers)\r\n\r\n// function to configure redux-react store\r\nexport const ConfigureStore = () => {\r\n\r\n    // use combineReducers to combine different reducers to manage \r\n    // different parts of the redux store's state\r\n    const store = createStore(\r\n        combineReducers({\r\n            dishInfo: DishInfoReducer,\r\n            commentInfo: CommentInfoReducer,\r\n            promoInfo: PromoInfoReducer,\r\n            leaderInfo: LeaderInfoReducer,\r\n            ...createForms({\r\n                feedback: InitialFeedbackForm\r\n            })\r\n        }),\r\n        allEnhancers);\r\n\r\n    return store;\r\n\r\n\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\n// import new components\nimport Main from './components/MainComponent';\nimport './App.css';\n\n//\n// add react redux\n//\n// provider provides store to all components in the app via props\nimport { Provider } from 'react-redux';\n\n// configure and create the react-redux store\nimport { ConfigureStore } from './redux/configureStore';\nconst store = ConfigureStore();\n\nconsole.log(\"store =\", store.getState());\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <div className=\"App\">\n            <Main></Main>\n          </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}